package net.divlight.retainer.processor;

import com.google.auto.service.AutoService;
import com.google.common.collect.ImmutableSet;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;

import net.divlight.retainer.Object;
import net.divlight.retainer.ObjectClassNameBuilder;
import net.divlight.retainer.annotation.Retain;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

@SuppressWarnings("unused")
@AutoService(Processor.class)
public class RetainProcessor extends AbstractProcessor {
    private Elements elementUtils;
    private Messager messager;
    private Filer filer;

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return ImmutableSet.of(Retain.class.getName());
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latest();
    }

    @Override
    public synchronized void init(ProcessingEnvironment processingEnvironment) {
        super.init(processingEnvironment);

        elementUtils = processingEnvironment.getElementUtils();
        messager = processingEnvironment.getMessager();
        filer = processingEnvironment.getFiler();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations,
                           RoundEnvironment roundEnvironment) {
        final Map<String, List<Element>> groupedElements = new HashMap<>();
        for (Element element : roundEnvironment.getElementsAnnotatedWith(Retain.class)) {
            if (element.getKind() != ElementKind.FIELD) {
                continue;
            }

            final Element classElement = getEnclosingClassElement(element);
            final String packageName = elementUtils.getPackageOf(classElement)
                    .getQualifiedName()
                    .toString();
            final String key = packageName + '.' + getObjectClassName(classElement);

            if (groupedElements.containsKey(key)) {
                final List<Element> elements = groupedElements.get(key);
                elements.add(element);
            } else {
                final List<Element> elements = new ArrayList<>();
                elements.add(element);
                groupedElements.put(key, elements);
            }
        }

        for (String key : groupedElements.keySet()) {
            final List<Element> fieldElements = groupedElements.get(key);
            final TypeElement classElement = getEnclosingClassElement(fieldElements.get(0));
            final String packageName = elementUtils.getPackageOf(classElement)
                    .getQualifiedName()
                    .toString();

            final String objectClassName = getObjectClassName(classElement);
            final TypeSpec.Builder builder = TypeSpec.classBuilder(objectClassName)
                    .addTypeVariable(TypeVariableName.get("T", ClassName.get(classElement)))
                    .addModifiers(Modifier.PUBLIC)
                    .addSuperinterface(ParameterizedTypeName.get(
                            ClassName.get(Object.class),
                            TypeVariableName.get("T")))
                    .addMethod(generateSaveMethodSpec(fieldElements))
                    .addMethod(generateRestoreMethodSpec(fieldElements));

            for (Element element : fieldElements) {
                builder.addField(TypeName.get(element.asType()),
                        element.getSimpleName().toString(),
                        Modifier.PRIVATE);
            }

            final JavaFile javaFile = JavaFile.builder(packageName, builder.build())
                    .addFileComment("This code is auto-generated by Retainer."
                            + " Do NOT modify this file.")
                    .build();

            try {
                javaFile.writeTo(filer);
            } catch (IOException e) {
                messager.printMessage(Diagnostic.Kind.ERROR, e.getMessage());
            }
        }

        return false;
    }

    private TypeElement getEnclosingClassElement(Element element) {
        while (element.getKind() != ElementKind.CLASS) {
            element = element.getEnclosingElement();
        }
        return (TypeElement) element;
    }

    private String getObjectClassName(Element classElement) {
        final String targetClassName = classElement.getSimpleName().toString();
        final ObjectClassNameBuilder builder = new ObjectClassNameBuilder(targetClassName);
        Element element = classElement.getEnclosingElement();
        while (element.getKind() != ElementKind.PACKAGE) {
            builder.addEnclosingClassSimpleName(element.getSimpleName().toString());
            element = element.getEnclosingElement();
        }
        return builder.build();
    }

    private MethodSpec generateSaveMethodSpec(List<Element> fieldElements) {
        final ParameterSpec parameterSpec = ParameterSpec
                .builder(TypeVariableName.get("T"), "target").build();
        final MethodSpec.Builder builder = MethodSpec.methodBuilder("save")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(parameterSpec);
        for (Element element : fieldElements) {
            final String fieldName = element.getSimpleName().toString();
            builder.addStatement("this.$L = target.$L", fieldName, fieldName);
        }
        return builder.build();
    }

    private MethodSpec generateRestoreMethodSpec(List<Element> fieldElements) {
        final ParameterSpec parameterSpec = ParameterSpec
                .builder(TypeVariableName.get("T"), "target").build();
        final MethodSpec.Builder builder = MethodSpec.methodBuilder("restore")
                .addAnnotation(Override.class)
                .addModifiers(Modifier.PUBLIC)
                .addParameter(parameterSpec);
        for (Element element : fieldElements) {
            final String fieldName = element.getSimpleName().toString();
            builder.addStatement("target.$L = this.$L", fieldName, fieldName);
        }
        return builder.build();
    }
}
